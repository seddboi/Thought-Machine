{"version":3,"sources":["Utilities/generateId.js","Utilities/expirationTime.js","components/Form/Form.js","components/Thought/Thought.js","components/Dashboard/Dashboard.js","App.js","index.js"],"names":["nextId","generateId","result","expirationTime","Date","now","Form","props","useState","text","setText","onSubmit","event","preventDefault","thought","id","expiresAt","length","addThought","className","value","onChange","target","type","placeholder","Thought","removeThought","useEffect","timeRemaining","timeout","setTimeout","clearTimeout","onClick","Dashboard","thoughts","setThoughts","thoughtID","prev","filter","map","href","App","ReactDOM","render","document","getElementById"],"mappings":"oQAAIA,EAAS,EAEN,SAASC,IACZ,IAAMC,EAASF,EAGf,OAFAA,GAAU,EAEHE,ECNJ,SAASC,IACZ,OAAOC,KAAKC,MAAQ,K,iBCKjB,SAASC,EAAKC,GACjB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAyBA,OACI,uBAAMC,SAnBW,SAACC,GAClBA,EAAMC,iBAGN,IAAMC,EAAU,CACZC,GAAId,IACJQ,KAAMA,EACNO,UAAWb,KAIXM,EAAKQ,OAAS,IACdV,EAAMW,WAAWJ,GAEjBJ,EAAQ,MAKkBS,UAAU,OAAxC,UACI,uBAAOA,UAAU,YAAYC,MAAOX,EAAMY,SAxBzB,SAACT,GACtBF,EAAQE,EAAMU,OAAOF,QAuBqDG,KAAK,OAAOC,YAAY,4BAC9F,uBAAOL,UAAU,cAAcI,KAAK,SAASH,MAAM,W,WC9BxD,SAASK,EAAQlB,GAEpB,IAAOO,EAA0BP,EAA1BO,QAASY,EAAiBnB,EAAjBmB,cAEhBC,qBAAU,WAGN,IAAMC,EAAgBd,EAAQE,UAAYZ,KAAKC,MAGzCwB,EAAUC,YAAW,WACvBJ,EAAcZ,EAAQC,MAGvBa,GAGH,OAAO,WACHG,aAAaF,MAElB,CAACf,IAOJ,OACI,qBAAIC,GAAG,UAAUI,UAAU,4CAA3B,UACI,oBAAIA,UAAU,OAAd,SAAuBL,EAAQL,OAC/B,wBAAQU,UAAU,gBAAgBa,QAPhB,WACtBN,EAAcZ,EAAQC,KAMlB,qB,MC3BL,SAASkB,IAIZ,MAAgCzB,mBAAS,CACrC,CACAO,GAAId,IACJQ,KAAM,iBACNO,UAAWb,KAEX,CACAY,GAAId,IACJQ,KAAM,mCACNO,UAAWb,OATf,mBAAO+B,EAAP,KAAiBC,EAAjB,KAkBMT,EAAgB,SAACU,GAGnBD,GAAY,SAACE,GACT,OAAOA,EAAKC,QAAO,SAACxB,GAAD,OAAaA,EAAQC,KAAOqB,SAIvD,OACI,gCACI,oBAAIjB,UAAU,aAAd,6BACA,oBAAIA,UAAU,eAAd,6DACA,oBAAIA,UAAU,eAAd,kCACA,cAAC,EAAD,CAAMD,WAjBK,SAACJ,GAChBqB,GAAY,SAACE,GAAD,OAAWvB,GAAX,mBAAuBuB,UAiB/B,oBAAIlB,UAAU,WAAd,SACKe,EAASK,KAAK,SAAAzB,GAAO,OACjB,cAAC,EAAD,CAA0BA,QAASA,EAASY,cAAeA,GAA7CZ,EAAQC,SAG/B,mBAAGO,OAAO,SAASkB,KAAK,6BAAxB,SAAqD,oBAAIrB,UAAU,UAAd,uCCtClDsB,MARf,WACE,OACE,qBAAKtB,UAAU,MAAf,SACE,cAAC,EAAD,OCANuB,IAASC,OAAO,cAAC,EAAD,IACdC,SAASC,eAAe,U","file":"static/js/main.97dfb2b1.chunk.js","sourcesContent":["var nextId = 0;\n\nexport function generateId() {\n    const result = nextId;\n    nextId += 1;\n\n    return result;\n};","export function expirationTime() {\n    return Date.now() + 15 * 1000;\n};","import React, {useState} from 'react';\nimport {generateId} from '../../Utilities/generateId.js';\nimport {expirationTime} from '../../Utilities/expirationTime.js';\n\nimport './Form.css';\n\nexport function Form(props) {\n    const [text, setText] = useState('');\n\n    //this function is called everytime the text value in the entry box is changed... adjusts state value of text\n    const handleTextChange = (event) => {\n        setText(event.target.value);\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        //sets object for new thought and fills in new message; new generated ID and new time 15 seconds ahead of current time\n        const thought = {\n            id: generateId(),\n            text: text,\n            expiresAt: expirationTime(),\n        };\n        \n        // checks if text has any text within it, then submits the new 'thought' to props.addThought\n        if (text.length > 0) {\n            props.addThought(thought);\n            // sets text state back to blank after submitting new thought\n            setText('');\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className='Form'>\n            <input className='form-text' value={text} onChange={handleTextChange} type='text' placeholder=\"Add your thoughts here!\" />\n            <input className='form-button' type='submit' value='Add' />\n        </form>\n    );\n};","import React, {useEffect} from 'react';\n\nimport './Thought.css';\nimport 'animate.css';\n\nexport function Thought(props) {\n    // variables that takes in props that were entered by the user, on the dashboard\n    const {thought, removeThought} = props;\n\n    useEffect(() => {\n        // adjusts the countdown of the time to the time set to the current time. \n        // once they are equal(the subtraction is equal to zero), the timout triggers\n        const timeRemaining = thought.expiresAt - Date.now();\n        \n        // timeout function that deletes message after time remaining \"runs out\"\n        const timeout = setTimeout(() => {\n            removeThought(thought.id);\n            // document.getElementById('Thought').classList.remove('animate__fadeIn');\n            // document.getElementById('Thought').classList.add('animate__fadeOut');\n        }, timeRemaining);\n\n        // cleanup function to clear out time\n        return () => {\n            clearTimeout(timeout);\n        }\n    }, [thought]);\n\n    // removes thought at selected id, when you select the x button attached\n    const handleRemoveClick = () => {\n        removeThought(thought.id);\n    };\n\n    return (\n        <li id='Thought' className='Thought animate__animated animate__fadeIn'>\n            <h4 className='text' >{thought.text}</h4>\n            <button className='remove-button' onClick={handleRemoveClick}>&times;</button>\n        </li>\n    )\n};","import React, {useState} from 'react';\nimport {generateId} from '../../Utilities/generateId.js';\nimport {expirationTime} from '../../Utilities/expirationTime.js';\nimport {Form} from '../Form/Form.js';\nimport {Thought} from '../Thought/Thought.js';\n\nimport './Dashboard.css'\n\nexport function Dashboard() {\n    // Sets up sample message when site first loads up; eventually disappears after 15s\n    // generateId adheres an id number starting at 0, to each thought to easily identify each thought\n    // expirationTime sets the automatic removal of the \"thought\" 15 seconds away from current time\n    const [thoughts, setThoughts] = useState([\n        {\n        id: generateId(),\n        text: \"Don't worry...\",\n        expiresAt: expirationTime(),\n        }, \n        {\n        id: generateId(),\n        text: 'They disappear after 15 seconds!',\n        expiresAt: expirationTime(), \n        }\n    ]);\n\n    //adds new thought object to array lists out all collective thoughts in thoughts array\n    const addThought = (thought) => {\n        setThoughts((prev) => [thought, ...prev]);\n    };\n\n    const removeThought = (thoughtID) => {\n        //reuses state and uses filter function to cycle through each object in the thoughts array,\n        // and remove the thought whose ID matches the one that was selected(clicked) on\n        setThoughts((prev) => {\n            return prev.filter((thought) => thought.id !== thoughtID)\n        });\n    };\n\n    return (\n        <div>\n            <h1 className='main-title'>Thought Machine</h1>\n            <h3 className='second-title'>This is an open space for any of your thoughts.</h3>\n            <h3 className='second-title'>Thanks for visiting!</h3>\n            <Form addThought={addThought} />\n            <ul className='thoughts'>\n                {thoughts.map( thought => \n                    (<Thought key={thought.id} thought={thought} removeThought={removeThought} />) \n                )}\n            </ul>\n            <a target='_blank' href='https://github.com/seddboi'><h4 className='credits'>created by gian z :)</h4></a>\n        </div>\n    )\n};","import './App.css';\nimport {Dashboard} from './components/Dashboard/Dashboard.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import 'foundation-sites/dist/css/foundation.min.css';\nimport 'animate.css';\nReactDOM.render(<App />,\n  document.getElementById('app')\n);\n\n"],"sourceRoot":""}